{"version":3,"file":"static/js/186.a975f7ce.chunk.js","mappings":"mTAEMA,EAAW,gCACXC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sBAA2C,CAChEI,OAAQ,CACNC,QAASJ,KAHkB,uBACvBK,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gBAAqC,CAC1DI,OAAQ,CACNC,QAASJ,EACTQ,MAAAA,KAJyB,uBACrBH,EADqB,EACrBA,KADqB,kBAQtBA,EAAKC,SARiB,2CAAH,sDAWfG,EAAe,mCAAG,WAAMC,GAAN,yFACNR,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BW,GAAM,CACzDP,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUfM,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,YAAiD,CACtET,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKQ,MAPiB,2CAAH,sDAUfC,EAAe,mCAAG,WAAMF,GAAN,yFACNV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,YAAiD,CACtET,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,qD,mIC7C5B,GAAgB,UAAY,wBAAwB,OAAS,qBAAqB,WAAa,0B,mBCGlFS,EAAe,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACxCC,EAAU,yCAAqCD,GACrD,OACE,gBAAIE,UAAWC,EAAAA,WAAf,WACE,gBACED,UAAWC,EAAAA,OACXC,IAAMJ,EAAyBC,EAAVI,EACrBC,IAAKP,KAGP,eAAIG,UAAWC,EAAAA,KAAf,SAA0BJ,KAC1B,uCAAeD,OAGpB,ECdYS,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,OACE,eAAIN,UAAWC,EAAAA,UAAf,SACGK,GAASA,EAAMC,KAAI,SAAAd,GAAI,OAAI,SAACE,GAAD,UAAgCF,GAAbA,EAAKH,GAA5B,KAG7B,E,8BCkCD,EAtCa,WACX,OAA0BkB,EAAAA,EAAAA,UAAS,IAAnC,eAAOF,EAAP,KAAcG,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQrB,GAAYsB,EAAAA,EAAAA,MAAZtB,QA0BR,OAxBAsB,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,YAAU,WACR,GAAKvB,EAAL,CACA,IAAMwB,EAAO,mCAAG,oGAEZL,GAAW,GAFC,UAGOpB,EAAAA,EAAAA,IAAgBC,GAHvB,OAGNP,EAHM,OAIZwB,EAASxB,GAET4B,EAAS,MANG,gDAQZA,EAAS,KAAMI,SARH,yBAUZN,GAAW,GAVC,4EAAH,qDAabK,GAdoB,CAerB,GAAE,CAACxB,KAEJuB,EAAAA,EAAAA,YAAU,WACHH,GACLM,MAAMN,EACP,GAAE,CAACA,KAGF,gCACGN,IAAS,SAACD,EAAD,CAAUC,MAAOA,IAC1BI,IAAW,SAACS,EAAA,EAAD,MAGjB,C","sources":["api/movies-service.js","webpack://react-homework-template/./src/components/CastList/cast.module.css?a933","components/CastList/CastListItem.jsx","components/CastList/CastList.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '25e4eeadea4cf520d825a9bf9fd0e85d';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"casteList\":\"cast_casteList__cFh2O\",\"actors\":\"cast_actors__i-KsQ\",\"linkActors\":\"cast_linkActors__afBle\"};","import css from './cast.module.css';\nimport PropTypes from 'prop-types';\nimport notImag from 'img/http-404-not-found-error.jpg';\n\nexport const CastListItem = ({ character, name, profile_path }) => {\n  const posterCast = `https://image.tmdb.org/t/p/w200${profile_path}`;\n  return (\n    <li className={css.linkActors}>\n      <img\n        className={css.actors}\n        src={!profile_path ? notImag : posterCast}\n        alt={name}\n      />\n\n      <h4 className={css.name}>{name}</h4>\n      <p>Character: {character}</p>\n    </li>\n  );\n};\n\nCastListItem.propTypes = {\n  character: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  profile_path: PropTypes.string.isRequired,\n};\n","import { CastListItem } from './CastListItem';\nimport css from './cast.module.css';\nimport PropTypes from 'prop-types';\n\nexport const CastList = ({ casts }) => {\n  return (\n    <ul className={css.casteList}>\n      {casts && casts.map(cast => <CastListItem key={cast.id} {...cast} />)}\n    </ul>\n  );\n};\n\nCastList.propTypes = {\n  casts: PropTypes.array.isRequired,\n};\n","import { getMovieCredits } from 'api/movies-service';\nimport { CastList } from 'components/CastList/CastList';\nimport { Loader } from 'components/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useParams();\n  useEffect(() => {\n    if (!movieId) return;\n    const getCast = async () => {\n      try {\n        setLoading(true);\n        const data = await getMovieCredits(movieId);\n        setCasts(data);\n\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) return;\n    alert(error);\n  }, [error]);\n\n  return (\n    <>\n      {casts && <CastList casts={casts} />}\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","getTrendingMovies","axios","params","api_key","data","results","getMovieByQuery","query","getMovieDetails","id","getMovieCredits","movieId","cast","getMovieReviews","CastListItem","character","name","profile_path","posterCast","className","css","src","notImag","alt","CastList","casts","map","useState","setCasts","loading","setLoading","error","setError","useParams","useEffect","getCast","message","alert","Loader"],"sourceRoot":""}