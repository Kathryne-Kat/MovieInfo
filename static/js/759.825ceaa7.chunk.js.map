{"version":3,"file":"static/js/759.825ceaa7.chunk.js","mappings":"sQAAaA,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnC,OACE,gBAAIC,UAAU,GAAd,WACE,qCAAaF,MACb,uBAAIC,MAGT,ECLYE,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OAAuB,IAAnBA,EAAQC,OACH,8CAGL,eAAIH,UAAU,GAAd,SACGE,GACCA,EAAQE,KAAI,SAAAC,GAAM,OAAI,SAACR,GAAD,UAAgCQ,GAAfA,EAAOC,GAA5B,KAI3B,E,oBCiCD,EAxCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA4BR,OA1BAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAU,mCAAG,oGAEfN,GAAW,GAFI,UAGIO,EAAAA,EAAAA,IAAgBJ,GAHpB,OAGTK,EAHS,OAIfV,EAAWU,GAGXN,EAAS,MAPM,gDASfA,EAAS,KAAMO,SATA,yBAWfT,GAAW,GAXI,4EAAH,qDAchBM,GAfoB,CAgBrB,GAAE,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WACHJ,GACLS,MAAMT,EACP,GAAE,CAACA,KAIF,gCACGT,IAAW,SAACD,EAAD,CAAaC,QAASA,IACjCO,IAAW,SAACY,EAAA,EAAD,MAGjB,C","sources":["components/ReviewsList/ReviewItem.jsx","components/ReviewsList/ReviewsList.jsx","pages/Reviews.jsx"],"sourcesContent":["export const ReviewItem = ({ author, content }) => {\n  return (\n    <li className=\"\">\n      <h3>Author: {author}</h3>\n      <p>{content}</p>\n    </li>\n  );\n};\n","import { ReviewItem } from './ReviewItem';\n\nexport const ReviewsList = ({ reviews }) => {\n  if (reviews.length === 0) {\n    return 'We don`t have any reviews for this movie. ';\n  } else {\n    return (\n      <ul className=\"\">\n        {reviews &&\n          reviews.map(review => <ReviewItem key={review.id} {...review} />)}\n      </ul>\n    );\n  }\n};\n","import { getMovieReviews } from 'api/movies-service';\nimport { Loader } from 'components/Loader';\nimport { ReviewsList } from 'components/ReviewsList/ReviewsList';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useParams();\n  useEffect(() => {\n    if (!movieId) return;\n    const getReviews = async () => {\n      try {\n        setLoading(true);\n        const data = await getMovieReviews(movieId);\n        setReviews(data);\n        //console.log(data);\n\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) return;\n    alert(error);\n  }, [error]);\n  // console.log(reviews);\n\n  return (\n    <>\n      {reviews && <ReviewsList reviews={reviews} />}\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["ReviewItem","author","content","className","ReviewsList","reviews","length","map","review","id","useState","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","getReviews","getMovieReviews","data","message","alert","Loader"],"sourceRoot":""}