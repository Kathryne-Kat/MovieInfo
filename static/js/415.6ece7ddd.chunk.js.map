{"version":3,"file":"static/js/415.6ece7ddd.chunk.js","mappings":"+SAEMA,EAAW,gCACXC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sBAA2C,CAChEI,OAAQ,CACNC,QAASJ,KAHkB,uBACvBK,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gBAAqC,CAC1DI,OAAQ,CACNC,QAASJ,EACTQ,MAAAA,KAJyB,uBACrBH,EADqB,EACrBA,KADqB,kBAQtBA,EAAKC,SARiB,2CAAH,sDAWfG,EAAe,mCAAG,WAAMC,GAAN,yFACNR,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BW,GAAM,CACzDP,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUfM,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,YAAiD,CACtET,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKQ,MAPiB,2CAAH,sDAUfC,EAAe,mCAAG,WAAMF,GAAN,yFACNV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8Ba,EAA9B,YAAiD,CACtET,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,qD,oGC7C5B,EAAyB,2BAAzB,EAAiE,+B,SCIpDS,EAAY,SAAC,GAAgC,IAA9BL,EAA6B,EAA7BA,GAAIM,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC/BC,GAAWC,EAAAA,EAAAA,MAEjB,GAAKF,EAAL,CACA,IAAMG,EAAM,yCAAqCH,GACjD,OACE,eAAII,UAAWC,EAAf,UACE,UAAC,KAAD,CAAMC,GAAI,WAAab,EAAIc,MAAO,CAAEC,KAAMP,GAA1C,WACE,gBAAKQ,IAAKN,EAAQO,IAAI,WACtB,wBAAKX,QANa,CAUzB,ECdYY,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE3B,OACE,eAAIR,UAAWC,EAAf,SACGO,GAAUA,EAAOC,KAAI,SAAAC,GAAK,OAAI,SAAChB,GAAD,UAA8BgB,GAAdA,EAAMrB,GAA1B,KAGhC,EAEDkB,EAAWI,SAAW,CACpBD,MAAOE,IAAAA,O,kHC6BT,UArCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOL,EAAP,KAAeM,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBJ,GAAW,GAFK,UAGGpC,EAAAA,EAAAA,MAHH,OAGVI,EAHU,OAIhB8B,EAAU9B,GACVkC,EAAS,MALO,gDAOhBA,EAAS,KAAMG,SAPC,yBAShBL,GAAW,GATK,4EAAH,qDAYjBI,GACD,GAAE,KAEHD,EAAAA,EAAAA,YAAU,WACHF,GACLK,MAAML,EACP,GAAE,CAACA,KAGF,iCACE,gCACE,6CACCT,EAAOe,OAAS,IAAK,SAAC,IAAD,CAAYf,OAAQA,OAE3CO,IAAW,SAAC,IAAD,MAGjB,C","sources":["api/movies-service.js","webpack://react-homework-template/./src/components/MoviesList/moviesList.module.css?9068","components/MoviesList/MovieCard.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '25e4eeadea4cf520d825a9bf9fd0e85d';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"poster\":\"moviesList_poster__hGfPY\",\"moviesList\":\"moviesList_moviesList__A7Eqi\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport css from './moviesList.module.css';\n\nexport const MovieCard = ({ id, title, poster_path }) => {\n  const location = useLocation();\n\n  if (!poster_path) return;\n  const poster = `https://image.tmdb.org/t/p/w200${poster_path}`;\n  return (\n    <li className={css.poster}>\n      <Link to={'/movies/' + id} state={{ from: location }}>\n        <img src={poster} alt=\"title\" />\n        <h2>{title}</h2>\n      </Link>\n    </li>\n  );\n};\n\nMovieCard.propTypes = {\n  //id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  poster_path: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n};\n\n// let poster = '';\n// if (poster_path === null) {\n//   poster =\n//     './img/http-404-not-found-error-message-hypertext-vector-20025007.jpg';\n// } else {\n//   poster = `https://image.tmdb.org/t/p/w200${poster_path}`;\n// }\n","import PropTypes from 'prop-types';\nimport { MovieCard } from './MovieCard';\nimport css from './moviesList.module.css';\n\nexport const MoviesList = ({ movies }) => {\n  //console.log(movies);\n  return (\n    <ul className={css.moviesList}>\n      {movies && movies.map(movie => <MovieCard key={movie.id} {...movie} />)}\n    </ul>\n  );\n};\n\nMoviesList.propType = {\n  movie: PropTypes.object,\n};\n","import { Loader } from 'components/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { getTrendingMovies } from '../api/movies-service';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getTrending = async () => {\n      try {\n        setLoading(true);\n        const data = await getTrendingMovies();\n        setMovies(data);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getTrending();\n  }, []);\n\n  useEffect(() => {\n    if (!error) return;\n    alert(error);\n  }, [error]);\n\n  return (\n    <>\n      <section>\n        <h1>Trending Movies </h1>\n        {movies.length > 0 && <MoviesList movies={movies} />}\n      </section>\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["BASE_URL","API_KEY","getTrendingMovies","axios","params","api_key","data","results","getMovieByQuery","query","getMovieDetails","id","getMovieCredits","movieId","cast","getMovieReviews","MovieCard","title","poster_path","location","useLocation","poster","className","css","to","state","from","src","alt","MoviesList","movies","map","movie","propType","PropTypes","useState","setMovies","loading","setLoading","error","setError","useEffect","getTrending","message","alert","length"],"sourceRoot":""}